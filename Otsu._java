import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.FilteredImageSource;
import java.awt.image.ImageFilter;
import java.awt.image.ImageProducer;
import java.awt.image.WritableRaster;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;

import javax.imageio.ImageIO;
import javax.swing.GrayFilter;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

public class Otsu {
  public static void main(String[] args) throws IOException {
    JFrame frame = new JFrame("Otsu");
    JPanel panel = new JPanel(new BorderLayout());
    BufferedImage sourceImage = ImageIO.read(Otsu.class.getResource("image.jpg"));
    BufferedImage grayImage = rgbToGray(sourceImage);

    int width = grayImage.getWidth();
    int height = grayImage.getHeight();

    frame.setSize(width, height);
    frame.add(panel);
    frame.setVisible(true);
    /**
     * Start image processing
     */
    int[][] matrix = imageToMatrix(grayImage, width, height);

    matrix = getOtsuMatrix(matrix, width, height);

    BufferedImage image = getImageFromMatrix(matrix, width, height);

    JLabel imageLabel = new JLabel(new ImageIcon(image));
    panel.add(imageLabel);
    frame.validate();
  }

  private static int[][] getOtsuMatrix(int[][] matrix, int width, int height) {
    int[] values = IntStream.range(1, 256).toArray();
    int[] counts = new int[values.length + 1];

    for (int i = 0; i < matrix.length; i++) {
      for (int j = 0; j < matrix[i].length; j++) {
        int gray = matrix[i][j];

        counts[gray] += 1;
      }
    }

    for (int i = 0; i < counts.length; i++) {
      System.out.println(i + ">>" + counts[i]);
    }

    return matrix;
  }

  private static int[][] imageToMatrix(BufferedImage image, int width, int height) {
    int[][] result = new int[height][width];
    for (int row = 0; row < height; row++) {
      for (int col = 0; col < width; col++) {
        int rgb = image.getRGB(col, row);
        int r = (rgb >> 16) & 0xFF;
        int g = (rgb >> 8) & 0xFF;
        int b = (rgb & 0xFF);
        int gray = (r + g + b) / 3;
        result[row][col] = gray;
      }
    }

    return result;
  }

  private static BufferedImage getImageFromMatrix(int[][] matrix, int width, int height) {
    BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
    for (int i = 0; i < height; i++) {

      for (int j = 0; j < width; j++) {
        int grey = matrix[i][j];
        int u = grey << 16 | grey << 8 | grey;
        image.setRGB(j, i, u);
      }
    }
    return image;
  }

  public static BufferedImage rgbToGray(BufferedImage img) {
    for (int x = 0; x < img.getWidth(); ++x)
      for (int y = 0; y < img.getHeight(); ++y) {
        int rgb = img.getRGB(x, y);
        int r = (rgb >> 16) & 0xFF;
        int g = (rgb >> 8) & 0xFF;
        int b = (rgb & 0xFF);

        double rr = Math.pow(r / 255.0, 2.2);
        double gg = Math.pow(g / 255.0, 2.2);
        double bb = Math.pow(b / 255.0, 2.2);

        double lum = 0.2126 * rr + 0.7152 * gg + 0.0722 * bb;

        int grayLevel = (int) (255.0 * Math.pow(lum, 1.0 / 2.2));
        int gray = (grayLevel << 16) + (grayLevel << 8) + grayLevel;
        img.setRGB(x, y, gray);
      }
    return img;
  }

}